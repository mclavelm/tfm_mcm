---
title: "Correlaciones y análisis de expresión con datos clínicos y funcionales"
format: pdf
---

```{r}
#Cargar las librerías para el manejo de datos
library(edgeR)
library(tximport)
library(tidyverse)
library(dplyr)
library(readODS)
```

```{r}
#configurar los directorios e importar los archivos de salmon: hay que definir las rutas de los archivos quant.sf y luego importarlos a r con tximport -> tximport carga las cantidades de las transcripciones (TMP, conteos de lecturas)

#Se definen las rutas de los directorios donde se encuentran los resultados de salmon para dos tipos de muestras: una correspondiente al grupo msc y otra al grupo wat. Estos directorios son los que contienen los archivos quant.sf generados por salmon.
salmon_dir<- c("../../msc/salmon_msc", "../../sc_wat/salmon_wat")

#Usamos list.files para crear una lista de todos los archivos llamados quant.sf debtri de los directorios. Buscamos los archivos de cuantificación de salmon a lo largo de todos los directorios (recursive) y con las rutas completas (full.names). 
samples<- list.files(salmon_dir, pattern = "quant.sf", recursive = TRUE, full.names = TRUE)

#Se extraen los nombres de las muestras a partir de las rutas de los archivos quant.sf. Primero se obtiene los nombres de los directorios que contienen los archivos (dirname) y luego el nombre final de cada muestra (basename). 
sample_names<- basename(dirname(samples))

#Se asigna el tipo de muestra a cada archivo: si el nombre del archivo contiene la palabra salmon_msc se le asigna msc, si no, se asigna wat. 
sample_type<- ifelse(grepl("salmon_msc", samples), "MSC", "WAT")

#Extraemos también el ID del donante
donor_id <- sub("-.*", "", sample_names)

#Se crea un data.frame con la información de cada muestra. 
sample_info<- data.frame(sample= sample_names, origin= sample_type, donor= donor_id, row.names = sample_names)

#Usamos tximport para importar los datos de cuantificación a nivel de transcritos generados por salmon. Los archivos .sf se cargan especificando el tipo de datos como salmon, y el parámetro txout asegura que se mantenga la cuantificación a nivel de transcritos. 
txi<- tximport(samples, type = "salmon", txOut = TRUE)

#Importamos la información de  los donantes
clinical_data<- read_ods("pacientes_modificado.ods", sheet = 1)

#Creamos un objeto dgelist para almacenar la info relacionada con los conteos de lecturas. 
dge<- DGEList(counts = txi$counts)
clinical_data <- clinical_data %>%
  mutate(sample_id = paste(IDmuestra, tejido, sep = "_"))

#Se asigna el factor group a cada muestra, indicando el origen de la muestra. Factor asegura que se trate la columna como un factor (variable categórica, msc o wat) -> de esta forma r hace las comparaciones necesarias entre los grupos para determinar qué genes tienen diferencias significativas entre las condiciones. 
dge$samples$group <- factor(sample_info$origin)
dge$samples$donor <- factor(sample_info$donor)
dge$samples$origin <- factor(sample_info$origin)
dge$samples <- dge$samples %>%
  mutate(sample_id = paste(donor, origin, sep = "_"))
clinical_data <- clinical_data[match(dge$samples$sample_id, clinical_data$sample_id), ]

#Con la función filterByExpr se filtran genes con baja expresión: evalúa qué genes tienen suficiente expresión en al menos un mínimo de muestras para ser considerados en el análisis. Los genes con una expresión muy baja en todas las muestras se descartan-> no aportan info útil. 
filtered_genes<- filterByExpr(dge)

#Actualizamos el objeto dge para mantener solo los genes que pasaron el filtro de expresión. Con el parámetro keep.lib.sizes nos aseguramos que la cantidad de lecturas por muestra no se ajusten. 
dge<- dge[filtered_genes, , keep.lib.sizes = FALSE]

#Normalización: corregimos las diferencias en la profundidad de secuenciación entre las muestras para que las comparaciones entre muestras sean más equitativas. La función calcula factores de normalización para cada muestra para que las diferencias en la cantidad total de lecturas no sesguen el análisis. 
dge<- calcNormFactors(dge)
#Ajustamos el modelo para la expresión diferencial (msc vs wat) 
#Se crea una matriz de diseño: necesaria para ajustar el modelo estadístico que se usará para el análisis. Se modela la relación entre los grupos como la variable de interés.  
design_groups<- model.matrix(~ dge$samples$group)

#Calcular la dispersión entre datos (variabilida de los conteos de lecturas para cada gen, para saber cuánto de confiables son las diferencias en la expresión génica). Si los datos tienen alta variabilidad, será más difícil detectar las diferencias significativas. La dispersión se calcula en función de la matriz de diseño. 
dge_groups <- dge
dge_groups<- estimateDisp(dge_groups, design_groups)

#Se ajusta un modelo lineal generalizado (GLM) para comparar las condiciones msc y wat. Recordatorio: dge contiene los conteos de lecturas normalizados y la información de las muestras, y la matriz de diseño especifica la relación entre las condiciones y los datos. Así evaluamos si hay diferencias significativas en la expresión génica de las dos condiciones. 
fit_groups <- glmQLFit(dge_groups, design_groups)

#Se realiza una prueba de expresión diferencial basada en el modelo de GLM. Se realiza la prueba quasi-likehood f-test (QLF) para evaluar las diferencias significativas. Con coef=2 nos referimos al coeficiente de la segunda columna de la matriz de diseño(en nuestro caso, wat en comparación con la condición msc). 
#El QLF-test es una extensión del anterior, diseñado para trabajar con datos de conteos de alta variabilidad. Ajusta la dispersión de cada gen individualmente. 
results_groups <- glmQLFTest(fit_groups, coef = 2)

#Seleccionamos los resultados más relevantes del análisis de expresión diferencial. Se guarda todo el conjunto de resultados (n=inf) 
dea_results_groups <- topTags(results_groups, n= Inf)

#Se convierte el objeto a un data.frame, que contiene los resultados de la prueba de expresión diferencial (más fácil de manipular y visualizar resultados). 
dea_results_groups_df <- as.data.frame(dea_results_groups)
```

```{r}
#Comparación por presencia de dislipemias (si/no)
clinical_data$DLP <- factor(clinical_data$DLP)
design_dlp <- model.matrix(~ clinical_data$DLP)
dge_dlp <- dge
dge_dlp<- estimateDisp(dge_dlp, design_dlp)
fit_dlp <- glmQLFit(dge_dlp, design_dlp)
results_dlp <- glmQLFTest(fit_dlp, coef = 2)
dea_results_dlp <- topTags(results_dlp, n= Inf)
dea_results_dlp_df <- as.data.frame(dea_results_dlp)
```

```{r}
#Comparación por presencia de diabetes 
clinical_data$DMIND <- factor(clinical_data$DMIND)
design_dm <- model.matrix(~ clinical_data$DMIND)
dge_dm <- dge
dge_dm<- estimateDisp(dge_dm, design_dm)
fit_dm <- glmQLFit(dge_dm, design_dm)
results_dm <- glmQLFTest(fit_dm, coef = 2)
dea_results_dm <- topTags(results_dm, n= Inf)
dea_results_dm_df <- as.data.frame(dea_results_dm)
```

```{r}
library(biomaRt)

#Nos conectamos a la base de datos de ensemble, indicando que trabajamos con datos de genes humanos. 
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")

#Extraemos los identificadores de los transcritos  de los resultados de la expresión diferencial. 
transcripts_dlp <- row.names(dea_results_dlp$table)
transcripts_dm <- row.names(dea_results_dm$table)

#Limpiamos los identificadores de los transcritos (eliminar cualquier codsa que venga después de _ o .). 
clean_transcripts_dlp <- gsub("_.*|\\..*", "", transcripts_dlp)
clean_transcripts_dm <- gsub("_.*|\\..*", "", transcripts_dm)

#Con getBM se realiza una consulta a la base de datos para obtener la información que necesitamos: con attributes le pedimos el identificador del transcrito de ensembl, el identificador y símbolo del gen correspondiente. Realizamos el filtrado por el identificador del transcrito de ensembl y los valores que usamos para filtrar son los transcritos. 
gene_info_dlp <- getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name"),
                   filters = "ensembl_transcript_id",
                   values = clean_transcripts_dlp,
                   mart = ensembl)
gene_info_dm <- getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name"),
                   filters = "ensembl_transcript_id",
                   values = clean_transcripts_dm,
                   mart = ensembl)
#Añadimos una columna al data.frame de los resultados con los identificadores de los transcritos en un formato adecuado para poder mapear con la información de ensembl. 
dea_results_dlp_df <- dea_results_dlp_df %>%
  mutate(ensembl_transcript_id = gsub("_.*|\\..*", "", rownames(dea_results_dlp_df)))
dea_results_dm_df <- dea_results_dm_df %>%
  mutate(ensembl_transcript_id = gsub("_.*|\\..*", "", rownames(dea_results_dm_df)))

#Unimos las anotaciones de los transcritos con los resultados de expresión diferencial. Se agregan las columnas correspondientes de gene_info, que contiene los identificadores de genes y símbolos. Especificamos que la unión se realice por la columna, ya limpia, de los identificadores de transcritos. 
dea_results_dlp_anot <- left_join(dea_results_dlp_df, gene_info_dlp, by= "ensembl_transcript_id")
dea_results_dm_anot <- left_join(dea_results_dm_df, gene_info_dm, by= "ensembl_transcript_id")
```

```{r}
#visualización de resultados (volcan)
library(ggplot2)
library(ggrepel)
#Selecciono los genes que tienen un valor de p ajustado (FDR) menor a 0.05, lo que implica significancia estadística, y los que tienen un logFC absoluto mayor de 2, lo que indica un cambio significativo en la expresión entre las condiciones. 
top_genes_dlp<- dea_results_dlp_anot %>%
  filter(FDR < 0.2 & abs(logFC) > 0.5)
top_genes_dm<- dea_results_dm_anot %>%
  filter(FDR < 0.2 & abs(logFC) >0.5)

ggplot(dea_results_dlp_anot, aes(x= logFC, y= -log10(FDR)))+
  geom_point()+
  geom_text_repel(data = top_genes_dlp, aes(label= external_gene_name))+
  theme_classic()
```

```{r}
ggplot(dea_results_dm_anot, aes(x= logFC, y= -log10(FDR)))+
  geom_point()+
  geom_text_repel(data = top_genes_dm, aes(label= external_gene_name))+
  theme_classic()
```

```{r}
#Probamos una matriz de correlaciones 
exp_matriz <- cpm(dge, log = TRUE)
wilc_results_dlp <- apply(exp_matriz, 1, function(x) {
  wilcox.test(x ~ clinical_data$DLP, exact= FALSE)$p.value
  })
wilc_results_dlp<- sort(wilc_results_dlp, decreasing = TRUE)
wilc_results_dlp<- p.adjust(wilc_results_dlp, method = "fdr")
significant_dlp_genes<- names(wilc_results_dlp)[wilc_results_dlp < 0.2]

wilc_results_dm <- apply(exp_matriz, 1, function(x) {
  wilcox.test(x ~ clinical_data$DMIND, exact= FALSE)$p.value
  })
wilc_results_dm<- p.adjust(wilc_results_dm, method = "fdr")
significant_dm_genes<- names(wilc_results_dm)[wilc_results_dm < 0.2]
```

```{r}
#Probamos módulos de coexpresión con wgcna
library(WGCNA)

#Preparamos los datos para WGCNA (requiere genes en columnas y muestras en filas)
datExpr <- t(exp_matriz)  

#Filtramos genes con baja variabilidad: se eliminan genes con demasiados na o expresión invariable. 
gsg <- goodSamplesGenes(datExpr)
datExpr <- datExpr[gsg$goodSamples, gsg$goodGenes]

#Calculamos la matriz de correlación de pesos: se prueban distintos valores de potencia (1 a 20) y selecciona el mejor según el criterio de distribución sin escala. De esta forma se destacan las correlaciones fuertes y se minimiza el ruido de las débiles. Como la red seguirá una distribución libre de ecala, es biológicamente relevante. 
powers <- c(1:20)
sft <- pickSoftThreshold(datExpr, powerVector = powers)

#Construimos la red de coexpresión: esta función detecta grupos de genes que se expresan juntos en los datos (divide el proceso en bloques para manejar muchos genes sin problemas de memoria).Se usa la potencia óptima calculada antes.  
net <- blockwiseModules(datExpr, power = sft$powerEstimate)

#Relacionamos módulos con características clínicas
moduleTraitCor <- cor(net$MEs, clinical_data, use = "p")

#Visualización
labeledHeatmap(
  Matrix = moduleTraitCor,
  xLabels = colnames(clinical_data),
  yLabels = names(net$MEs),
  ySymbols = names(net$MEs),
  colors = blueWhiteRed(50),
  cex.lab = 0.4,
)

```

```{r}
#Extraer la correlación entre los módulos y ciertas variables
#Definimos las variables clínicas para las que queremos hacer la extracción
clinical_vars <- c("HTA", "DLP", "DMIND", "CAP", "Kpa", "NAS", "diferenciacion", "TG_normalizado", "oilred", "absGLU")

#Creamos una lista vacía para almacenar los resultados
modules_pos_list <- list()
modules_neg_list <- list()

#Bucle para iterar sobre cada variable clínica y obtener los módulos correspondientes
for (clinical_var in clinical_vars) {
  #Extraemos la correlación con la variable clínica
  correlation <- moduleTraitCor[, clinical_var]
  modules_pos_list[[clinical_var]] <- names(correlation)[correlation > 0.25]
  modules_neg_list[[clinical_var]] <- names(correlation)[correlation < 0.25]
  #Quitar el prefijo "ME" de los módulos de colores
  modules_pos_list[[clinical_var]] <- sub("^ME", "", modules_pos_list[[clinical_var]])
  modules_neg_list[[clinical_var]] <- sub("^ME", "", modules_neg_list[[clinical_var]])
}



```

```{r}
#DISLIPEMIAS
genes_pos_dlp <- names(datExpr)[net$colors %in% modules_pos_list$DLP]
genes_neg_dlp <- names(datExpr)[net$colors %in% modules_neg_list$DLP]

```
